#!/usr/bin/env bash

# Function: backup_dbms
# Description: Backups the database management system
# Arguments:
#   $1: Backup name
backup_dbms() {
    local backup_name="${1}"
    local was_running=1

    if ! docker_service_is_running "db"; then
        docker compose -f "${docker_compose}" up db -d
        was_running=0
    fi

    # Execute backup command for the database management system
    docker compose -f "${docker_compose}" exec db bash -c "yarsin backup md -n ${backup_name} && chown $(id -u):$(id -u) "/backups/${backup_name}""

    if [ ${was_running} = 0 ]; then
        docker compose -f "${docker_compose}" db down
    fi
}

# Function: backup_data
# Description: Backups data
# Arguments:
#   $1: Database name
#   $2: Backup name
backup_data() {
    local database="${1}"
    local backup_name="${2}"
    local was_running=1

    if ! docker_service_is_running "db"; then
        docker compose -f "${docker_compose}" up db -d
        was_running=0
    fi

    # Execute backup command for the data
    docker compose -f "${docker_compose}" exec db bash -c "run_as $(whoami) $(id -u) yarsin backup db -n ${backup_name} -d ${database}"

    if [ ${was_running} = 0 ]; then
        docker compose -f "${docker_compose}" down
    fi
}

# Function: backup_imgs
# Description: Backups images
# Arguments:
#   $1: Service name
#   $2: Backup name
backup_imgs() {
    local service="$1"
    local backup_name="$2"

    # Execute backup command for the images
    if docker_service_is_running "db"; then
        docker compose -f "${docker_compose}" exec "${service}" bash -c "run_as $(whoami) $(id -u) yarsin backup imgs -n "${backup_name}""
    else
        docker compose -f "${docker_compose}" run --rm "${service}" bash -c "run_as $(whoami) $(id -u) yarsin backup imgs -n "${backup_name}""
    fi
}

# Generate Persian date and time stamp
persian_date="$(gregorian_to_persian)__$(date +'%H_%M_%S')"

# Check if there are no command line arguments
if [[ $# -eq 0 ]]; then
    # Backup data and images for default service
    backup_data ${DEFAULT_DATABASE} "${DEFAULT_SERVICE}/${DEFAULT_DATABASE}___${persian_date}___data.sql.gz"
    exit 0
fi

# Assign the first command line argument to the variable 'function_name'
function_name="$1"
shift

# Check the function name and call the corresponding backup function
if [[ "$function_name" = "data" ]]; then
    db_name="${1:-"${DEFAULT_DATABASE}"}"
    service_name="$(get_service_name $db_name)"
    backup_data "${db_name}" "${service_name}/${db_name}___${persian_date}___data.sql.gz"
elif [[ "$function_name" = "imgs" ]]; then
    service_name="${1:-"${DEFAULT_SERVICE}"}"
    backup_imgs "${service_name}" "${service_name}___${persian_date}___imgs.tar.xz"
elif [[ "$function_name" = "dbms" ]]; then
    backup_dbms "${DBMS_BACKUP_FILE_PREFIX}___${persian_date}___dbms.sql.gz"
elif [[ "$function_name" = "full" ]]; then
    service_name="${1:-"${DEFAULT_SERVICE}"}"
    db_name="${service_name}_db"
    backup_data "${db_name}" "${service_name}/${db_name}___${persian_date}___data.sql.gz"
    backup_imgs "${service_name}" "${db_name}___${persian_date}___imgs.tar.xz"
else
    message_error "Invalid function name. Available functions: data, imgs, full, dbms"
fi
